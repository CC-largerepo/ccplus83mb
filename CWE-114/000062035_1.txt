

#include <wchar.h>

namespace GenNS1
{



class GenClass1
{
public:
    GenClass1(char * dataCopy);
    ~GenClass1();

private:
    char * data;
};

}



#include <windows.h>

namespace GenNS1
{
GenClass1::GenClass1(char * dataCopy)
{
    data = dataCopy;
    {
        size_t dataLen = strlen(data);
        if (100-dataLen > 1)
        {
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                data[dataLen] = '\0';
            }
        }
    }
}

GenClass1::~GenClass1()
{
    {
        HMODULE hModule;
        hModule = LoadLibraryA(data);
        if (hModule != NULL)
        {
            FreeLibrary(hModule);
            printLine("Library loaded and freed successfully");
        }
        else
        {
            printLine("Unable to load library");
        }
    }
}
}


namespace GenNS1
{



void func3()
{
    char * data;
    char dataBuffer[100] = "";
    data = dataBuffer;
    GenClass1 * var1 = new GenClass1(data);
    delete var1;
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func3();
    printLine("Finished");
    return 0;
}

