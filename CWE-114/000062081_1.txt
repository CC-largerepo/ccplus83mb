

#include <wchar.h>

namespace GenNS1
{

class GenClass1
{
public:
    virtual void action(char * data) = 0;
};



class GenClass2 : public GenClass1
{
public:
    void action(char * data);
};

}



#include <windows.h>

namespace GenNS1
{

void GenClass2::action(char * data)
{
    {
        HMODULE hModule;
        hModule = LoadLibraryA(data);
        if (hModule != NULL)
        {
            FreeLibrary(hModule);
            printLine("Library loaded and freed successfully");
        }
        else
        {
            printLine("Unable to load library");
        }
    }
}

}


#define ENV_VARIABLE "ADD"

#ifdef _WIN32
#define GETENV getenv
#else
#define GETENV getenv
#endif

namespace GenNS1
{



void func2()
{
    char * data;
    char dataBuffer[100] = "";
    data = dataBuffer;
    {
        size_t dataLen = strlen(data);
        char * environment = GETENV(ENV_VARIABLE);
        if (environment != NULL)
        {
            strncat(data+dataLen, environment, 100-dataLen-1);
        }
    }
    GenClass1* baseObject = new GenClass2;
    baseObject->action(data);
    delete baseObject;
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func2();
    printLine("Finished");
    return 0;
}

