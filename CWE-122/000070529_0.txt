

#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)



int func2(int data)
{
    data = 7;
    return data;
}

int func3(int data)
{
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    return data;
}



#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)



int func2(int data);

static void func5()
{
    int data;
    data = -1;
    data = func2(data);
    {
        int i;
        int * buffer = (int *)malloc(10 * sizeof(int));
        for (i = 0; i < 10; i++)
        {
            buffer[i] = 0;
        }
        if (data >= 0)
        {
            buffer[data] = 1;
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is negative.");
        }
        free(buffer);
    }
}

int func3(int data);

static void func6()
{
    int data;
    data = -1;
    data = func3(data);
    {
        int i;
        int * buffer = (int *)malloc(10 * sizeof(int));
        for (i = 0; i < 10; i++)
        {
            buffer[i] = 0;
        }
        if (data >= 0 && data < (10))
        {
            buffer[data] = 1;
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is out-of-bounds");
        }
        free(buffer);
    }
}

void func7()
{
    func5();
    func6();
}



int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func7();
    printLine("Finished");
    return 0;
}

