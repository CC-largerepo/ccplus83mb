

typedef struct _linkedList
{
    struct _linkedList *next;
    struct _linkedList *prev;
} linkedList;

typedef struct var1
{
    linkedList list;
} var2;

static linkedList *linkedListPrev, *linkedListNext;

namespace GenNS1
{

class GenClass1
{
public:
    virtual void action(var2 data) const = 0;
};



class GenClass2 : public GenClass1
{
public:
    void action(var2 data) const;
};

}



namespace GenNS1
{

void GenClass2::action(var2 data) const
{
    linkedListPrev = data.list.prev;
    linkedListNext = data.list.next;
    linkedListPrev->next = linkedListNext;
    linkedListNext->prev = linkedListPrev;
}

}


namespace GenNS1
{



void func1()
{
    var2 data;
    linkedList head = { &head, &head };
    data.list.next = head.next;
    data.list.prev = head.prev;
    head.next = &data.list;
    head.prev = &data.list;
    if (fgets((char*)&data, sizeof(data), stdin) == NULL)
    {
        printLine("fgets failed!");
        exit(1);
    }
    const GenClass1& baseObject = GenClass2();
    baseObject.action(data);
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func1();
    printLine("Finished");
    return 0;
}

