

namespace GenNS1
{

class GenClass1
{
public:
    virtual void action(int data) = 0;
};



class GenClass3 : public GenClass1
{
public:
    void action(int data);
};

class GenClass4 : public GenClass1
{
public:
    void action(int data);
};

}



namespace GenNS1
{

void GenClass4::action(int data)
{
    {
        int i;
        int buffer[10] = { 0 };
        if (data >= 0 && data < (10))
        {
            buffer[data] = 1;
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is out-of-bounds");
        }
    }
}

}




namespace GenNS1
{

void GenClass3::action(int data)
{
    {
        int i;
        int buffer[10] = { 0 };
        if (data < 10)
        {
            buffer[data] = 1;
            for(i = 0; i < 10; i++)
            {
                printIntLine(buffer[i]);
            }
        }
        else
        {
            printLine("ERROR: Array index is negative.");
        }
    }
}

}


namespace GenNS1
{



static void func3()
{
    int data;
    data = -1;
    data = 7;
    GenClass1* baseObject = new GenClass3;
    baseObject->action(data);
    delete baseObject;
}

static void func4()
{
    int data;
    data = -1;
    data = -5;
    GenClass1* baseObject = new GenClass4;
    baseObject->action(data);
    delete baseObject;
}

void func5()
{
    func3();
    func4();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func5();
    printLine("Finished");
    return 0;
}

