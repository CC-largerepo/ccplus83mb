

namespace GenNS1
{

class GenClass1
{
public:
    virtual void action(int data) const = 0;
};



class GenClass3 : public GenClass1
{
public:
    void action(int data) const;
};

class GenClass4 : public GenClass1
{
public:
    void action(int data) const;
};

}



namespace GenNS1
{

void GenClass4::action(int data) const
{
    {
        int buffer[10] = { 0 };
        if (data >= 0 && data < (10))
        {
            printIntLine(buffer[data]);
        }
        else
        {
            printLine("ERROR: Array index is out-of-bounds");
        }
    }
}

}




namespace GenNS1
{

void GenClass3::action(int data) const
{
    {
        int buffer[10] = { 0 };
        if (data >= 0)
        {
            printIntLine(buffer[data]);
        }
        else
        {
            printLine("ERROR: Array index is negative");
        }
    }
}

}


#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)

namespace GenNS1
{



static void func2()
{
    int data;
    data = -1;
    data = 7;
    const GenClass1& baseObject = GenClass3();
    baseObject.action(data);
}

static void func3()
{
    int data;
    data = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    const GenClass1& baseObject = GenClass4();
    baseObject.action(data);
}

void func4()
{
    func2();
    func3();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func4();
    printLine("Finished");
    return 0;
}

