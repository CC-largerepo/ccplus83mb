

#ifndef _WIN32
#include <wchar.h>
#endif

namespace GenNS1
{



class GenClass2
{
public:
    GenClass2(char * dataCopy);
    ~GenClass2();

private:
    char * data;
};

class GenClass3
{
public:
    GenClass3(char * dataCopy);
    ~GenClass3();

private:
    char * data;
};

}

#include <stdarg.h>


namespace GenNS1
{
GenClass3::GenClass3(char * dataCopy)
{
    data = dataCopy;
    {
        size_t dataLen = strlen(data);
        if (100-dataLen > 1)
        {
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                data[dataLen] = '\0';
            }
        }
    }
}

static void func4(char * data, ...)
{
    {
        va_list args;
        va_start(args, data);
        vfprintf(stdout, "%s", args);
        va_end(args);
    }
}

GenClass3::~GenClass3()
{
    func4(data, data);
}
}


#include <stdarg.h>


namespace GenNS1
{
GenClass2::GenClass2(char * dataCopy)
{
    data = dataCopy;
    strcpy(data, "fixedstringtest");
}

static void func6(char * data, ...)
{
    {
        va_list args;
        va_start(args, data);
        vfprintf(stdout, data, args);
        va_end(args);
    }
}

GenClass2::~GenClass2()
{
    func6(data, data);
}
}


namespace GenNS1
{



static void func8()
{
    char * data;
    char dataBuffer[100] = "";
    data = dataBuffer;
    GenClass2 * var2 = new GenClass2(data);
    delete var2;
}

static void func9()
{
    char * data;
    char dataBuffer[100] = "";
    data = dataBuffer;
    GenClass3 * var3 = new GenClass3(data);
    delete var3;
}

void func10()
{
    func8();
    func9();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func10();
    printLine("Finished");
    return 0;
}

