

#ifndef _WIN32
#include <wchar.h>
#endif

namespace GenNS1
{

class GenClass1
{
public:
    virtual void action(char * data) const = 0;
};



class GenClass3 : public GenClass1
{
public:
    void action(char * data) const;
};

class GenClass4 : public GenClass1
{
public:
    void action(char * data) const;
};

}

#include <stdarg.h>


namespace GenNS1
{

static void func2(char * data, ...)
{
    {
        va_list args;
        va_start(args, data);
        vfprintf(stdout, "%s", args);
        va_end(args);
    }
}

void GenClass4::action(char * data) const
{
    func2(data, data);
}

}


#include <stdarg.h>


namespace GenNS1
{

static void func3(char * data, ...)
{
    {
        va_list args;
        va_start(args, data);
        vfprintf(stdout, data, args);
        va_end(args);
    }
}

void GenClass3::action(char * data) const
{
    func3(data, data);
}

}


#define ENV_VARIABLE "ADD"

#ifdef _WIN32
#define GETENV getenv
#else
#define GETENV getenv
#endif

namespace GenNS1
{



static void func5()
{
    char * data;
    char dataBuffer[100] = "";
    data = dataBuffer;
    strcpy(data, "fixedstringtest");
    const GenClass1& baseObject = GenClass3();
    baseObject.action(data);
}

static void func6()
{
    char * data;
    char dataBuffer[100] = "";
    data = dataBuffer;
    {
        size_t dataLen = strlen(data);
        char * environment = GETENV(ENV_VARIABLE);
        if (environment != NULL)
        {
            strncat(data+dataLen, environment, 100-dataLen-1);
        }
    }
    const GenClass1& baseObject = GenClass4();
    baseObject.action(data);
}

void func7()
{
    func5();
    func6();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func7();
    printLine("Finished");
    return 0;
}

