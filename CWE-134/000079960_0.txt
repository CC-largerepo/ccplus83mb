

#ifndef _WIN32
#include <wchar.h>
#endif

namespace GenNS1
{



class GenClass2
{
public:
    GenClass2(char * dataCopy);
    ~GenClass2();

private:
    char * data;
};

class GenClass3
{
public:
    GenClass3(char * dataCopy);
    ~GenClass3();

private:
    char * data;
};

}

#include <stdarg.h>


#define ENV_VARIABLE "ADD"

#ifdef _WIN32
#define GETENV getenv
#else
#define GETENV getenv
#endif

namespace GenNS1
{
GenClass3::GenClass3(char * dataCopy)
{
    data = dataCopy;
    {
        size_t dataLen = strlen(data);
        char * environment = GETENV(ENV_VARIABLE);
        if (environment != NULL)
        {
            strncat(data+dataLen, environment, 100-dataLen-1);
        }
    }
}

static void func4(char * data, ...)
{
    {
        char dest[100] = "";
        va_list args;
        va_start(args, data);
        vsnprintf(dest, 100-1, "%s", args);
        va_end(args);
        printLine(dest);
    }
}

GenClass3::~GenClass3()
{
    func4(data, data);
}
}


#include <stdarg.h>


namespace GenNS1
{
GenClass2::GenClass2(char * dataCopy)
{
    data = dataCopy;
    strcpy(data, "fixedstringtest");
}

static void func6(char * data, ...)
{
    {
        char dest[100] = "";
        va_list args;
        va_start(args, data);
        vsnprintf(dest, 100-1, data, args);
        va_end(args);
        printLine(dest);
    }
}

GenClass2::~GenClass2()
{
    func6(data, data);
}
}


namespace GenNS1
{



static void func8()
{
    char * data;
    char dataBuffer[100] = "";
    data = dataBuffer;
    GenClass2 var2(data);
}

static void func9()
{
    char * data;
    char dataBuffer[100] = "";
    data = dataBuffer;
    GenClass3 var3(data);
}

void func10()
{
    func8();
    func9();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func10();
    printLine("Finished");
    return 0;
}

