

#ifndef _WIN32
#include <wchar.h>
#endif

namespace GenNS1
{



class GenClass2
{
public:
    GenClass2(wchar_t * dataCopy);
    ~GenClass2();

private:
    wchar_t * data;
};

class GenClass3
{
public:
    GenClass3(wchar_t * dataCopy);
    ~GenClass3();

private:
    wchar_t * data;
};

}



#ifdef _WIN32
#define SNPRINTF _snwprintf
#else
#define SNPRINTF snprintf
#endif

namespace GenNS1
{
GenClass3::GenClass3(wchar_t * dataCopy)
{
    data = dataCopy;
    {
        size_t dataLen = wcslen(data);
        if (100-dataLen > 1)
        {
            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                dataLen = wcslen(data);
                if (dataLen > 0 && data[dataLen-1] == L'\n')
                {
                    data[dataLen-1] = L'\0';
                }
            }
            else
            {
                printLine("fgetws() failed");
                data[dataLen] = L'\0';
            }
        }
    }
}

GenClass3::~GenClass3()
{
    {
        wchar_t dest[100] = L"";
        SNPRINTF(dest, 100-1, L"%s", data);
        printWLine(dest);
    }
}
}




#ifdef _WIN32
#define SNPRINTF _snwprintf
#else
#define SNPRINTF snprintf
#endif

namespace GenNS1
{
GenClass2::GenClass2(wchar_t * dataCopy)
{
    data = dataCopy;
    wcscpy(data, L"fixedstringtest");
}

GenClass2::~GenClass2()
{
    {
        wchar_t dest[100] = L"";
        SNPRINTF(dest, 100-1, data);
        printWLine(dest);
    }
}
}


namespace GenNS1
{



static void func5()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = L"";
    data = dataBuffer;
    GenClass2 * var2 = new GenClass2(data);
    delete var2;
}

static void func6()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = L"";
    data = dataBuffer;
    GenClass3 * var3 = new GenClass3(data);
    delete var3;
}

void func7()
{
    func5();
    func6();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func7();
    printLine("Finished");
    return 0;
}

