#include <stdarg.h>
#include <vector>


#ifndef _WIN32
#include <wchar.h>
#endif

using namespace std;

namespace GenNS1
{



static void func3(wchar_t * data, ...)
{
    {
        va_list args;
        va_start(args, data);
        vfwprintf(stdout, data, args);
        va_end(args);
    }
}

void func4(vector<wchar_t *> dataVector)
{
    wchar_t * data = dataVector[2];
    func3(data, data);
}

static void func5(wchar_t * data, ...)
{
    {
        va_list args;
        va_start(args, data);
        vfwprintf(stdout, L"%s", args);
        va_end(args);
    }
}

void func6(vector<wchar_t *> dataVector)
{
    wchar_t * data = dataVector[2];
    func5(data, data);
}

} #include <vector>


#ifndef _WIN32
#include <wchar.h>
#endif

using namespace std;

namespace GenNS1
{



void func4(vector<wchar_t *> dataVector);

static void func8()
{
    wchar_t * data;
    vector<wchar_t *> dataVector;
    wchar_t dataBuffer[100] = L"";
    data = dataBuffer;
    wcscpy(data, L"fixedstringtest");
    dataVector.insert(dataVector.end(), 1, data);
    dataVector.insert(dataVector.end(), 1, data);
    dataVector.insert(dataVector.end(), 1, data);
    func4(dataVector);
}

void func6(vector<wchar_t *> dataVector);

static void func9()
{
    wchar_t * data;
    vector<wchar_t *> dataVector;
    wchar_t dataBuffer[100] = L"";
    data = dataBuffer;
    {
        size_t dataLen = wcslen(data);
        if (100-dataLen > 1)
        {
            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                dataLen = wcslen(data);
                if (dataLen > 0 && data[dataLen-1] == L'\n')
                {
                    data[dataLen-1] = L'\0';
                }
            }
            else
            {
                printLine("fgetws() failed");
                data[dataLen] = L'\0';
            }
        }
    }
    dataVector.insert(dataVector.end(), 1, data);
    dataVector.insert(dataVector.end(), 1, data);
    dataVector.insert(dataVector.end(), 1, data);
    func6(dataVector);
}

void func10()
{
    func8();
    func9();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func10();
    printLine("Finished");
    return 0;
}

