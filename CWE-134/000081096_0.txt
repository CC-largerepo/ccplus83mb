#include <stdarg.h>


#ifndef _WIN32
#include <wchar.h>
#endif



void func7(wchar_t * data);

void func2(wchar_t * data)
{
    func7(data);
}

void func9(wchar_t * data);

void func3(wchar_t * data)
{
    func9(data);
}

#include <stdarg.h>


#ifndef _WIN32
#include <wchar.h>
#endif



static void func6(wchar_t * data, ...)
{
    {
        wchar_t dest[100] = L"";
        va_list args;
        va_start(args, data);
        _vsnwprintf(dest, 100-1, data, args);
        va_end(args);
        printWLine(dest);
    }
}

void func7(wchar_t * data)
{
    func6(data, data);
}

static void func8(wchar_t * data, ...)
{
    {
        wchar_t dest[100] = L"";
        va_list args;
        va_start(args, data);
        _vsnwprintf(dest, 100-1, L"%s", args);
        va_end(args);
        printWLine(dest);
    }
}

void func9(wchar_t * data)
{
    func8(data, data);
}

#include <stdarg.h>


#ifndef _WIN32
#include <wchar.h>
#endif



void func2(wchar_t * data);

static void func11()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = L"";
    data = dataBuffer;
    wcscpy(data, L"fixedstringtest");
    func2(data);
}

void func3(wchar_t * data);

static void func12()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = L"";
    data = dataBuffer;
    {
        size_t dataLen = wcslen(data);
        if (100-dataLen > 1)
        {
            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                dataLen = wcslen(data);
                if (dataLen > 0 && data[dataLen-1] == L'\n')
                {
                    data[dataLen-1] = L'\0';
                }
            }
            else
            {
                printLine("fgetws() failed");
                data[dataLen] = L'\0';
            }
        }
    }
    func3(data);
}

void func13()
{
    func11();
    func12();
}



int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func13();
    printLine("Finished");
    return 0;
}

