

#ifndef _WIN32
#include <wchar.h>
#endif

namespace GenNS1
{

class GenClass1
{
public:
    virtual void action(wchar_t * data) const = 0;
};



class GenClass3 : public GenClass1
{
public:
    void action(wchar_t * data) const;
};

class GenClass4 : public GenClass1
{
public:
    void action(wchar_t * data) const;
};

}



namespace GenNS1
{

void GenClass4::action(wchar_t * data) const
{
    fwprintf(stdout, L"%s\n", data);
}

}




namespace GenNS1
{

void GenClass3::action(wchar_t * data) const
{
    fwprintf(stdout, data);
}

}


#define ENV_VARIABLE L"ADD"

#ifdef _WIN32
#define GETENV _wgetenv
#else
#define GETENV getenv
#endif

namespace GenNS1
{



static void func2()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = L"";
    data = dataBuffer;
    wcscpy(data, L"fixedstringtest");
    const GenClass1& baseObject = GenClass3();
    baseObject.action(data);
}

static void func3()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = L"";
    data = dataBuffer;
    {
        size_t dataLen = wcslen(data);
        wchar_t * environment = GETENV(ENV_VARIABLE);
        if (environment != NULL)
        {
            wcsncat(data+dataLen, environment, 100-dataLen-1);
        }
    }
    const GenClass1& baseObject = GenClass4();
    baseObject.action(data);
}

void func4()
{
    func2();
    func3();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func4();
    printLine("Finished");
    return 0;
}

