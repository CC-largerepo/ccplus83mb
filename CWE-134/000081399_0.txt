

#ifndef _WIN32
#include <wchar.h>
#endif

namespace GenNS1
{

class GenClass1
{
public:
    virtual void action(wchar_t * data) = 0;
};



class GenClass3 : public GenClass1
{
public:
    void action(wchar_t * data);
};

class GenClass4 : public GenClass1
{
public:
    void action(wchar_t * data);
};

}

#include <stdarg.h>


namespace GenNS1
{

static void func3(wchar_t * data, ...)
{
    {
        wchar_t dest[100] = L"";
        va_list args;
        va_start(args, data);
        _vsnwprintf(dest, 100-1, L"%s", args);
        va_end(args);
        printWLine(dest);
    }
}

void GenClass4::action(wchar_t * data)
{
    func3(data, data);
}

}


#include <stdarg.h>


namespace GenNS1
{

static void func4(wchar_t * data, ...)
{
    {
        wchar_t dest[100] = L"";
        va_list args;
        va_start(args, data);
        _vsnwprintf(dest, 100-1, data, args);
        va_end(args);
        printWLine(dest);
    }
}

void GenClass3::action(wchar_t * data)
{
    func4(data, data);
}

}


#define ENV_VARIABLE L"ADD"

#ifdef _WIN32
#define GETENV _wgetenv
#else
#define GETENV getenv
#endif

namespace GenNS1
{



static void func6()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = L"";
    data = dataBuffer;
    wcscpy(data, L"fixedstringtest");
    GenClass1* baseObject = new GenClass3;
    baseObject->action(data);
    delete baseObject;
}

static void func7()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = L"";
    data = dataBuffer;
    {
        size_t dataLen = wcslen(data);
        wchar_t * environment = GETENV(ENV_VARIABLE);
        if (environment != NULL)
        {
            wcsncat(data+dataLen, environment, 100-dataLen-1);
        }
    }
    GenClass1* baseObject = new GenClass4;
    baseObject->action(data);
    delete baseObject;
}

void func8()
{
    func6();
    func7();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func8();
    printLine("Finished");
    return 0;
}

