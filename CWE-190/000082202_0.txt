

namespace GenNS1
{

class GenClass1
{
public:
    virtual void action(char data) const = 0;
};



class GenClass3 : public GenClass1
{
public:
    void action(char data) const;
};

class GenClass4 : public GenClass1
{
public:
    void action(char data) const;
};

}



namespace GenNS1
{

void GenClass4::action(char data) const
{
    if(data > 0) 
    {
        if (data < (CHAR_MAX/2))
        {
            char result = data * 2;
            printHexCharLine(result);
        }
        else
        {
            printLine("data value is too large to perform arithmetic safely.");
        }
    }
}

}




namespace GenNS1
{

void GenClass3::action(char data) const
{
    if(data > 0) 
    {
        char result = data * 2;
        printHexCharLine(result);
    }
}

}


namespace GenNS1
{



static void func2()
{
    char data;
    data = ' ';
    data = 2;
    const GenClass1& baseObject = GenClass3();
    baseObject.action(data);
}

static void func3()
{
    char data;
    data = ' ';
    fscanf (stdin, "%c", &data);
    const GenClass1& baseObject = GenClass4();
    baseObject.action(data);
}

void func4()
{
    func2();
    func3();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func4();
    printLine("Finished");
    return 0;
}

