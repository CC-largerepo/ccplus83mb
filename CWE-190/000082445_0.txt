

namespace GenNS1
{



class GenClass2
{
public:
    GenClass2(char dataCopy);
    ~GenClass2();

private:
    char data;
};

class GenClass3
{
public:
    GenClass3(char dataCopy);
    ~GenClass3();

private:
    char data;
};

}



namespace GenNS1
{
GenClass3::GenClass3(char dataCopy)
{
    data = dataCopy;
    data = (char)RAND32();
}

GenClass3::~GenClass3()
{
    if (data < CHAR_MAX)
    {
        char result = data + 1;
        printHexCharLine(result);
    }
    else
    {
        printLine("data value is too large to perform arithmetic safely.");
    }
}
}




namespace GenNS1
{
GenClass2::GenClass2(char dataCopy)
{
    data = dataCopy;
    data = 2;
}

GenClass2::~GenClass2()
{
    {
        char result = data + 1;
        printHexCharLine(result);
    }
}
}


namespace GenNS1
{



static void func5()
{
    char data;
    data = ' ';
    GenClass2 * var2 = new GenClass2(data);
    delete var2;
}

static void func6()
{
    char data;
    data = ' ';
    GenClass3 * var3 = new GenClass3(data);
    delete var3;
}

void func7()
{
    func5();
    func6();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func7();
    printLine("Finished");
    return 0;
}

