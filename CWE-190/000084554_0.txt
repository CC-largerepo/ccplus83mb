

namespace GenNS1
{

class GenClass1
{
public:
    virtual void action(unsigned int data) const = 0;
};



class GenClass3 : public GenClass1
{
public:
    void action(unsigned int data) const;
};

class GenClass4 : public GenClass1
{
public:
    void action(unsigned int data) const;
};

}



#include <math.h>

namespace GenNS1
{

void GenClass4::action(unsigned int data) const
{
    if (abs((long)data) <= (long)sqrt((double)UINT_MAX))
    {
        unsigned int result = data * data;
        printUnsignedLine(result);
    }
    else
    {
        printLine("data value is too large to perform arithmetic safely.");
    }
}

}




#include <math.h>

namespace GenNS1
{

void GenClass3::action(unsigned int data) const
{
    {
        unsigned int result = data * data;
        printUnsignedLine(result);
    }
}

}


namespace GenNS1
{



static void func2()
{
    unsigned int data;
    data = 0;
    data = 2;
    const GenClass1& baseObject = GenClass3();
    baseObject.action(data);
}

static void func3()
{
    unsigned int data;
    data = 0;
    data = UINT_MAX;
    const GenClass1& baseObject = GenClass4();
    baseObject.action(data);
}

void func4()
{
    func2();
    func3();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func4();
    printLine("Finished");
    return 0;
}

