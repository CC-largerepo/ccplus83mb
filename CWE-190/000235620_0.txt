#include <map>

#include <math.h>

using namespace std;

namespace GenNS1
{



void func2(map<int, int> dataMap)
{
    int data = dataMap[2];
    {
        int result = data * data;
        printIntLine(result);
    }
}

void func3(map<int, int> dataMap)
{
    int data = dataMap[2];
    if (data > INT_MIN && abs(data) < (long)sqrt((double)INT_MAX))
    {
        int result = data * data;
        printIntLine(result);
    }
    else
    {
        printLine("data value is too large to perform arithmetic safely.");
    }
}

} #include <map>

#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)

using namespace std;

namespace GenNS1
{



void func2(map<int, int> dataMap);

static void func5()
{
    int data;
    map<int, int> dataMap;
    data = 0;
    data = 2;
    dataMap[0] = data;
    dataMap[1] = data;
    dataMap[2] = data;
    func2(dataMap);
}

void func3(map<int, int> dataMap);

static void func6()
{
    int data;
    map<int, int> dataMap;
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    dataMap[0] = data;
    dataMap[1] = data;
    dataMap[2] = data;
    func3(dataMap);
}

void func7()
{
    func5();
    func6();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func7();
    printLine("Finished");
    return 0;
}

