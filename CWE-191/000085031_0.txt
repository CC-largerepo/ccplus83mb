#include <vector>

using namespace std;

namespace GenNS1
{



void func2(vector<int64_t> dataVector)
{
    int64_t data = dataVector[2];
    if(data < 0) 
    {
        int64_t result = data * 2;
        printLongLongLine(result);
    }
}

void func3(vector<int64_t> dataVector)
{
    int64_t data = dataVector[2];
    if(data < 0) 
    {
        if (data > (LLONG_MIN/2))
        {
            int64_t result = data * 2;
            printLongLongLine(result);
        }
        else
        {
            printLine("data value is too small to perform multiplication.");
        }
    }
}

} #include <vector>

using namespace std;

namespace GenNS1
{



void func2(vector<int64_t> dataVector);

static void func5()
{
    int64_t data;
    vector<int64_t> dataVector;
    data = 0LL;
    data = -2;
    dataVector.insert(dataVector.end(), 1, data);
    dataVector.insert(dataVector.end(), 1, data);
    dataVector.insert(dataVector.end(), 1, data);
    func2(dataVector);
}

void func3(vector<int64_t> dataVector);

static void func6()
{
    int64_t data;
    vector<int64_t> dataVector;
    data = 0LL;
    fscanf (stdin, "%lld", &data);
    dataVector.insert(dataVector.end(), 1, data);
    dataVector.insert(dataVector.end(), 1, data);
    dataVector.insert(dataVector.end(), 1, data);
    func3(dataVector);
}

void func7()
{
    func5();
    func6();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func7();
    printLine("Finished");
    return 0;
}

