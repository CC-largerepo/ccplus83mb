

#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)

namespace GenNS1
{



void func2(int &data)
{
    data = -2;
}

void func3(int &data)
{
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
}

} 

namespace GenNS1
{



void func2(int &data);

static void func5()
{
    int data;
    data = 0;
    func2(data);
    {
        int result = data - 1;
        printIntLine(result);
    }
}

void func3(int &data);

static void func6()
{
    int data;
    data = 0;
    func3(data);
    if (data > INT_MIN)
    {
        int result = data - 1;
        printIntLine(result);
    }
    else
    {
        printLine("data value is too large to perform subtraction.");
    }
}

void func7()
{
    func5();
    func6();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func7();
    printLine("Finished");
    return 0;
}

