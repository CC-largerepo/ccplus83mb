

namespace GenNS1
{

class GenClass1
{
public:
    virtual void action(short data) = 0;
};



class GenClass3 : public GenClass1
{
public:
    void action(short data);
};

class GenClass4 : public GenClass1
{
public:
    void action(short data);
};

}



namespace GenNS1
{

void GenClass4::action(short data)
{
    if(data < 0) 
    {
        if (data > (SHRT_MIN/2))
        {
            short result = data * 2;
            printIntLine(result);
        }
        else
        {
            printLine("data value is too small to perform multiplication.");
        }
    }
}

}




namespace GenNS1
{

void GenClass3::action(short data)
{
    if(data < 0) 
    {
        short result = data * 2;
        printIntLine(result);
    }
}

}


namespace GenNS1
{



static void func3()
{
    short data;
    data = 0;
    data = -2;
    GenClass1* baseObject = new GenClass3;
    baseObject->action(data);
    delete baseObject;
}

static void func4()
{
    short data;
    data = 0;
    fscanf (stdin, "%hd", &data);
    GenClass1* baseObject = new GenClass4;
    baseObject->action(data);
    delete baseObject;
}

void func5()
{
    func3();
    func4();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func5();
    printLine("Finished");
    return 0;
}

