

namespace GenNS1
{



class GenClass1
{
public:
    GenClass1(short dataCopy);
    ~GenClass1();

private:
    short data;
};

}



#define CHAR_ARRAY_SIZE 8

namespace GenNS1
{
GenClass1::GenClass1(short dataCopy)
{
    data = dataCopy;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
}

GenClass1::~GenClass1()
{
    {
        char source[100];
        char dest[100] = "";
        memset(source, 'A', 100-1);
        source[100-1] = '\0';
        if (data < 100)
        {
            memmove(dest, source, data);
            dest[data] = '\0'; 
        }
        printLine(dest);
    }
}
}


namespace GenNS1
{



void func3()
{
    short data;
    data = 0;
    GenClass1 * var1 = new GenClass1(data);
    delete var1;
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func3();
    printLine("Finished");
    return 0;
}

