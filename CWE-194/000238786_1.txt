

#define CHAR_ARRAY_SIZE 8



void func3(short data);

void func1(short data)
{
    func3(data);
}



#define CHAR_ARRAY_SIZE 8



void func5(short data);

void func3(short data)
{
    func5(data);
}



#define CHAR_ARRAY_SIZE 8



void func5(short data)
{
    if (data < 100)
    {
        char * dataBuffer = (char *)malloc(data);
        if (dataBuffer == NULL) {exit(-1);}
        memset(dataBuffer, 'A', data-1);
        dataBuffer[data-1] = '\0';
        printLine(dataBuffer);
        free(dataBuffer);
    }
}



#define CHAR_ARRAY_SIZE 8



void func1(short data);

void func7()
{
    short data;
    data = 0;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            data = (short)atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    func1(data);
}



int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func7();
    printLine("Finished");
    return 0;
}

