#include "std_testcase.h"

#include "std_thread.h"

#define N_ITERS 1000000

static int var1 = 0;
static int var2 = 0;
static stdThreadLock var3 = NULL;

static void func1(void *args)
{
    int i;
    for (i = 0; i < N_ITERS; i++)
    {
        var1 = var1 + 1;
    }
}

static void func2(void *args)
{
    int i;
    stdThreadLockAcquire(var3);
    for (i = 0; i < N_ITERS; i++)
    {
        var2 = var2 + 1;
    }
    stdThreadLockRelease(var3);
}



static void func4()
{
    goto var4;
var4:
    {
        stdThread threadA = NULL;
        stdThread threadB = NULL;
        if (!stdThreadLockCreate(&var3))
        {
            return;
        }
        if (!stdThreadCreate(func2, NULL, &threadA))
        {
            threadA = NULL;
        }
        if (!stdThreadCreate(func2, NULL, &threadB))
        {
            threadB = NULL;
        }
        if (threadA && stdThreadJoin(threadA))
        {
            stdThreadDestroy(threadA);
        }
        if (threadB && stdThreadJoin(threadB))
        {
            stdThreadDestroy(threadB);
        }
        stdThreadLockDestroy(var3);
        printIntLine(var2);
    }
}

void func5()
{
    func4();
}



int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func5();
    printLine("Finished");
    return 0;
}

