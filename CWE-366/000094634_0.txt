#include "std_testcase.h"

#include "std_thread.h"

#define N_ITERS 1000000

static stdThreadLock var1 = NULL;

static void func1(void *args)
{
    int *pIntArgs = (int*)args;
    int i;
    for (i = 0; i < N_ITERS; i++)
    {
        *pIntArgs = *pIntArgs + 1;
    }
}

static void func2(void *args)
{
    int *pIntArgs = (int *)args;
    int i;
    stdThreadLockAcquire(var1);
    for (i = 0; i < N_ITERS; i++)
    {
        *pIntArgs = *pIntArgs + 1;
    }
    stdThreadLockRelease(var1);
}



static void func5()
{
    switch(5)
    {
    case 6:
        printLine("Benign, fixed string");
        break;
    default:
    {
        stdThread threadA = NULL;
        stdThread threadB = NULL;
        int var3;
        var3 = 0;
        if (!stdThreadLockCreate(&var1))
        {
            return;
        }
        if (!stdThreadCreate(func2, (void*)&var3, &threadA))
        {
            threadA = NULL;
        }
        if (!stdThreadCreate(func2, (void*)&var3, &threadB))
        {
            threadB = NULL;
        }
        if (threadA && stdThreadJoin(threadA))
        {
            stdThreadDestroy(threadA);
        }
        if (threadB && stdThreadJoin(threadB))
        {
            stdThreadDestroy(threadB);
        }
        stdThreadLockDestroy(var1);
        printIntLine(var3);
    }
    break;
    }
}

static void func7()
{
    switch(6)
    {
    case 6:
    {
        stdThread threadA = NULL;
        stdThread threadB = NULL;
        int var3;
        var3 = 0;
        if (!stdThreadLockCreate(&var1))
        {
            return;
        }
        if (!stdThreadCreate(func2, (void*)&var3, &threadA))
        {
            threadA = NULL;
        }
        if (!stdThreadCreate(func2, (void*)&var3, &threadB))
        {
            threadB = NULL;
        }
        if (threadA && stdThreadJoin(threadA))
        {
            stdThreadDestroy(threadA);
        }
        if (threadB && stdThreadJoin(threadB))
        {
            stdThreadDestroy(threadB);
        }
        stdThreadLockDestroy(var1);
        printIntLine(var3);
    }
    break;
    default:
        printLine("Benign, fixed string");
        break;
    }
}

void func9()
{
    func5();
    func7();
}



int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func9();
    printLine("Finished");
    return 0;
}

