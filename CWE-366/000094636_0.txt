#include "std_testcase.h"

#include "std_thread.h"

#define N_ITERS 1000000

static stdThreadLock var1 = NULL;

static void func1(void *args)
{
    int *pIntArgs = (int*)args;
    int i;
    for (i = 0; i < N_ITERS; i++)
    {
        *pIntArgs = *pIntArgs + 1;
    }
}

static void func2(void *args)
{
    int *pIntArgs = (int *)args;
    int i;
    stdThreadLockAcquire(var1);
    for (i = 0; i < N_ITERS; i++)
    {
        *pIntArgs = *pIntArgs + 1;
    }
    stdThreadLockRelease(var1);
}



static void func4()
{
    int k;
    for(k = 0; k < 1; k++)
    {
        {
            stdThread threadA = NULL;
            stdThread threadB = NULL;
            int var3;
            var3 = 0;
            if (!stdThreadLockCreate(&var1))
            {
                return;
            }
            if (!stdThreadCreate(func2, (void*)&var3, &threadA))
            {
                threadA = NULL;
            }
            if (!stdThreadCreate(func2, (void*)&var3, &threadB))
            {
                threadB = NULL;
            }
            if (threadA && stdThreadJoin(threadA))
            {
                stdThreadDestroy(threadA);
            }
            if (threadB && stdThreadJoin(threadB))
            {
                stdThreadDestroy(threadB);
            }
            stdThreadLockDestroy(var1);
            printIntLine(var3);
        }
    }
}

void func5()
{
    func4();
}



int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func5();
    printLine("Finished");
    return 0;
}

