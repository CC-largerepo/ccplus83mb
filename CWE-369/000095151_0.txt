

namespace GenNS1
{

class GenClass1
{
public:
    virtual void action(int data) = 0;
};



class GenClass3 : public GenClass1
{
public:
    void action(int data);
};

class GenClass4 : public GenClass1
{
public:
    void action(int data);
};

}



namespace GenNS1
{

void GenClass4::action(int data)
{
    if( data != 0 )
    {
        printIntLine(100 % data);
    }
    else
    {
        printLine("This would result in a divide by zero");
    }
}

}




namespace GenNS1
{

void GenClass3::action(int data)
{
    printIntLine(100 % data);
}

}


#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)

namespace GenNS1
{



static void func3()
{
    int data;
    data = -1;
    data = 7;
    GenClass1* baseObject = new GenClass3;
    baseObject->action(data);
    delete baseObject;
}

static void func4()
{
    int data;
    data = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    GenClass1* baseObject = new GenClass4;
    baseObject->action(data);
    delete baseObject;
}

void func5()
{
    func3();
    func4();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func5();
    printLine("Finished");
    return 0;
}

