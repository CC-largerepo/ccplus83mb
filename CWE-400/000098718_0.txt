

namespace GenNS1
{

class GenClass1
{
public:
    virtual void action(int count) = 0;
};



class GenClass3 : public GenClass1
{
public:
    void action(int count);
};

class GenClass4 : public GenClass1
{
public:
    void action(int count);
};

}



#define SENTENCE "This is the sentence we are printing to the file. "

namespace GenNS1
{

void GenClass4::action(int count)
{
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = ";
        if (count > 0 && count <= 20)
        {
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)) exit(1);
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}

}




#define SENTENCE "This is the sentence we are printing to the file. "

namespace GenNS1
{

void GenClass3::action(int count)
{
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = ";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
}

}


#define CHAR_ARRAY_SIZE (3 * sizeof(count) + 2)

namespace GenNS1
{



static void func3()
{
    int count;
    count = -1;
    count = 20;
    GenClass1* baseObject = new GenClass3;
    baseObject->action(count);
    delete baseObject;
}

static void func4()
{
    int count;
    count = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            count = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    GenClass1* baseObject = new GenClass4;
    baseObject->action(count);
    delete baseObject;
}

void func5()
{
    func3();
    func4();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func5();
    printLine("Finished");
    return 0;
}

