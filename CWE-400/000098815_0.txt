

namespace GenNS1
{



class GenClass2
{
public:
    GenClass2(int countCopy);
    ~GenClass2();

private:
    int count;
};

class GenClass3
{
public:
    GenClass3(int countCopy);
    ~GenClass3();

private:
    int count;
};

}



namespace GenNS1
{
GenClass3::GenClass3(int countCopy)
{
    count = countCopy;
    fscanf(stdin, "%d", &count);
}

GenClass3::~GenClass3()
{
    {
        size_t i = 0;
        if (count > 0 && count <= 20)
        {
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
}




namespace GenNS1
{
GenClass2::GenClass2(int countCopy)
{
    count = countCopy;
    count = 20;
}

GenClass2::~GenClass2()
{
    {
        size_t i = 0;
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}
}


namespace GenNS1
{



static void func5()
{
    int count;
    count = -1;
    GenClass2 var2(count);
}

static void func6()
{
    int count;
    count = -1;
    GenClass3 var3(count);
}

void func7()
{
    func5();
    func6();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func7();
    printLine("Finished");
    return 0;
}

