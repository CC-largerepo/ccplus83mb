

namespace GenNS1
{

class GenClass1
{
public:
    virtual void action(int count) const = 0;
};



class GenClass3 : public GenClass1
{
public:
    void action(int count) const;
};

class GenClass4 : public GenClass1
{
public:
    void action(int count) const;
};

}



#ifdef _WIN32
#include <windows.h>
#define SLEEP Sleep
#else
#include <unistd.h>
#define SLEEP usleep
#endif

namespace GenNS1
{

void GenClass4::action(int count) const
{
    if (count > 0 && count <= 2000)
    {
        SLEEP(count);
        printLine("Sleep time OK");
    }
    else
    {
        printLine("Sleep time too long");
    }
}

}




#ifdef _WIN32
#include <windows.h>
#define SLEEP Sleep
#else
#include <unistd.h>
#define SLEEP usleep
#endif

namespace GenNS1
{

void GenClass3::action(int count) const
{
    SLEEP(count);
    printLine("Sleep time possibly too long");
}

}


namespace GenNS1
{



static void func2()
{
    int count;
    count = -1;
    count = 20;
    const GenClass1& baseObject = GenClass3();
    baseObject.action(count);
}

static void func3()
{
    int count;
    count = -1;
    fscanf(stdin, "%d", &count);
    const GenClass1& baseObject = GenClass4();
    baseObject.action(count);
}

void func4()
{
    func2();
    func3();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func4();
    printLine("Finished");
    return 0;
}

