

namespace GenNS1
{



class GenClass2
{
public:
    GenClass2(int countCopy);
    ~GenClass2();

private:
    int count;
};

class GenClass3
{
public:
    GenClass3(int countCopy);
    ~GenClass3();

private:
    int count;
};

}



#ifdef _WIN32
#include <windows.h>
#define SLEEP Sleep
#else
#include <unistd.h>
#define SLEEP usleep
#endif

namespace GenNS1
{
GenClass3::GenClass3(int countCopy)
{
    count = countCopy;
    fscanf(stdin, "%d", &count);
}

GenClass3::~GenClass3()
{
    if (count > 0 && count <= 2000)
    {
        SLEEP(count);
        printLine("Sleep time OK");
    }
    else
    {
        printLine("Sleep time too long");
    }
}
}




#ifdef _WIN32
#include <windows.h>
#define SLEEP Sleep
#else
#include <unistd.h>
#define SLEEP usleep
#endif

namespace GenNS1
{
GenClass2::GenClass2(int countCopy)
{
    count = countCopy;
    count = 20;
}

GenClass2::~GenClass2()
{
    SLEEP(count);
    printLine("Sleep time possibly too long");
}
}


namespace GenNS1
{



static void func5()
{
    int count;
    count = -1;
    GenClass2 var2(count);
}

static void func6()
{
    int count;
    count = -1;
    GenClass3 var3(count);
}

void func7()
{
    func5();
    func6();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func7();
    printLine("Finished");
    return 0;
}

