

namespace GenNS1
{

class GenClass1
{
public:
    virtual void action(int count) const = 0;
};



class GenClass3 : public GenClass1
{
public:
    void action(int count) const;
};

class GenClass4 : public GenClass1
{
public:
    void action(int count) const;
};

}



namespace GenNS1
{

void GenClass4::action(int count) const
{
    {
        size_t i = 0;
        if (count > 0 && count <= 20)
        {
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}

}




namespace GenNS1
{

void GenClass3::action(int count) const
{
    {
        size_t i = 0;
        for (i = 0; i < (size_t)count; i++)
        {
            printLine("Hello");
        }
    }
}

}


namespace GenNS1
{



static void func2()
{
    int count;
    count = -1;
    count = 20;
    const GenClass1& baseObject = GenClass3();
    baseObject.action(count);
}

static void func3()
{
    int count;
    count = -1;
    count = RAND32();
    const GenClass1& baseObject = GenClass4();
    baseObject.action(count);
}

void func4()
{
    func2();
    func3();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func4();
    printLine("Finished");
    return 0;
}

