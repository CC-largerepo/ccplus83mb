

namespace GenNS1
{



class GenClass1 
{
    public:
        GenClass1(const char * name)
        {
            if (name)
            {
                this->name = new char[strlen(name) + 1];
                strcpy(this->name, name);
            }
            else
            {
                this->name = new char[1];
                *(this->name) = '\0';
            }
        }

        ~GenClass1()
        {
            }
        
        GenClass1(GenClass1 &var1)
        { 
            this->name = new char[strlen(var1.name) + 1];
            strcpy(this->name, var1.name);
        }

        GenClass1& operator=(const GenClass1 &var1) 
        { 
            if (&var1 != this) 
            { 
                this->name = new char[strlen(var1.name) + 1];
                strcpy(this->name, var1.name);
            } 
            return *this; 
        }

        void printName()
        {
            printLine(name);
        }

    private:
        char * name;
    };

void func5()
{
    GenClass1 var1 (");

    var1.printName();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func5();
    printLine("Finished");
    return 0;
}



namespace GenNS1
{

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );
    return 0;
}

