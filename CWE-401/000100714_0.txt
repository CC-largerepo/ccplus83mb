

namespace GenNS1
{

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );
    return 0;
}



namespace GenNS1
{



class GenClass3
{
    public:
        GenClass3()
        { 
            printLine("Constructor:");
        }
        
        virtual ~GenClass3()
        {
            printLine("Destructor :");
        }
};

class GenClass4: public GenClass3
{
    public:
        GenClass4(const char * name)
        { 
            printLine("Constructor:");
            if (name)
            {
                this->name = new char[strlen(name) + 1];
                strcpy(this->name, name);
                printLine(this->name);
            }
            else
            {
                this->name = new char[1];
                *(this->name) = '\0';
            }
        }
        
        ~GenClass4()
        { 
            printLine("Destructor :");
            delete [] name;
        }

        GenClass4(GenClass4 &derivedClassObject)
        { 
            this->name = new char[strlen(derivedClassObject.name) + 1];
            strcpy(this->name, derivedClassObject.name);
        }

        GenClass4& operator=(const GenClass4 &derivedClassObject)
        { 
            if (&derivedClassObject != this) 
            { 
                this->name = new char[strlen(derivedClassObject.name) + 1];
                strcpy(this->name, derivedClassObject.name);
            } 
            return *this; 
        }

    private:
        char * name;
};

static void func10()
{
    GenClass3 * baseClassObject = new GenClass4(");

    delete baseClassObject;
}

void func11()
{
    func10();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func11();
    printLine("Finished");
    return 0;
}

