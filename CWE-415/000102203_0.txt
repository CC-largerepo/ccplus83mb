

namespace GenNS1
{

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );
    return 0;
}



namespace GenNS1
{



class GenClass2 
{
    public:
        GenClass2(const char *data)
        {
            if (data) 
            {
                this->data = new char[strlen(data) + 1];
                strcpy(this->data, data);
            } 
            else 
            {
                this->data = new char[1];
                *(this->data) = '\0';
            }
        }

        ~GenClass2()
        {
            delete [] data;
        }

        void printData()
        {
            printLine(data);
        }

        GenClass2(GenClass2 &var4)
        { 
            this->data = new char[strlen(var4.data) + 1];
            strcpy(this->data, var4.data);
        }

        GenClass2& operator=(const GenClass2 &var4)
        { 
            if (&var4 != this) 
            { 
                this->data = new char[strlen(var4.data) + 1];
                strcpy(this->data, var4.data);
            } 
            return *this; 
        }

    private:
        char *data;
};

static void func8()
{
    GenClass2 var5("One"), var6("Two");

    var6 = var5;

    var6.printData();
}

void func9()
{
    func8();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func9();
    printLine("Finished");
    return 0;
}

