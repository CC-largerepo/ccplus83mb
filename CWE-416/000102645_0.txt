

namespace GenNS1
{

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );
    return 0;
}



namespace GenNS1
{



class GenClass2 
{
	public:
		GenClass2() 
        {
			name = NULL;
		}
		
		GenClass2(const char * name) 
        {
			if (name)
            {
                this->name = new char[strlen(name) + 1];
                strcpy(this->name, name);
            } 
            else 
            {
                this->name = new char[1];
                *(this->name) = '\0';
            }
		}

		~GenClass2() 
        {
			delete [] name;
		}

		GenClass2(GenClass2 &var2)
        { 
			this->name = new char[strlen(var2.name)+1]; 
			strcpy(this->name, var2.name);
		}
		
		GenClass2& operator=(const GenClass2& var2) 
        {
		    if (this != &var2) 
            {
				delete [] this->name;
				this->name = new char[strlen(var2.name)+1]; 
				strcpy(this->name, var2.name);
			}
			return *this;
		}
		
		char * name;
};

static void func8()
{
    GenClass2 var2(");
	var2 = var2;
	printLine(var2.name);
}

void func9()
{
    func8();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func9();
    printLine("Finished");
    return 0;
}

