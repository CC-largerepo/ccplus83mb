

#include <wchar.h>
#include <list>
#include <iostream>

using namespace std;

namespace GenNS1
{



extern int var2;
extern int var3;
extern int var4;

void func2(list<int>  data)
{
    if(var2)
    {
        printLine("Benign, fixed string");
    }
    else
    {
        {
            list<int> ::iterator i;
            cout << "The list contains: ";
            for( i = data.begin(); i != data.end(); i++)
            {
                cout << " " << *i;
            }
            cout << endl;
        }
    }
}

void func3(list<int>  data)
{
    if(var3)
    {
        {
            list<int> ::iterator i;
            cout << "The list contains: ";
            for( i = data.begin(); i != data.end(); i++)
            {
                cout << " " << *i;
            }
            cout << endl;
        }
    }
}

void func4(list<int>  data)
{
    if(var4)
    {
        {
            list<int> ::iterator i;
            cout << "The list contains: ";
            for( i = data.begin(); i != data.end(); i++)
            {
                if (!*i)
                {
                    data.clear();
                }
                cout << " " << *i;
            }
            cout << endl;
        }
    }
}

} 

#include <wchar.h>
#include <list>
#include <iostream>

using namespace std;

namespace GenNS1
{



int var2 = 0;
int var3 = 0;
int var4 = 0;

void func2(list<int>  data);

static void func6()
{
    list<int>  data;
    data.push_back(100);
    data.push_back(0);
    var2 = 0; 
    func2(data);
}

void func3(list<int>  data);

static void func7()
{
    list<int>  data;
    data.push_back(100);
    data.push_back(0);
    var3 = 1; 
    func3(data);
}

void func4(list<int>  data);

static void func8()
{
    list<int>  data;
    data.push_back(100);
    data.push_back(200);
    var4 = 1; 
    func4(data);
}

void func9()
{
    func6();
    func7();
    func8();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func9();
    printLine("Finished");
    return 0;
}

