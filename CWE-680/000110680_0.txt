

#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)

namespace GenNS1
{



void func4(int data);

void func2(int data)
{
    func4(data);
}

} 

#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)

namespace GenNS1
{



void func6(int data);

void func4(int data)
{
    func6(data);
}

} 

#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)

namespace GenNS1
{



void func8(int data);

void func6(int data)
{
    func8(data);
}

} 

#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)

namespace GenNS1
{



void func8(int data)
{
    {
        size_t dataBytes,i;
        int *intPointer;
        dataBytes = data * sizeof(int); 
        intPointer = (int*)new char[dataBytes];
        for (i = 0; i < (size_t)data; i++)
        {
            intPointer[i] = 0; 
        }
        printIntLine(intPointer[0]);
        delete [] intPointer;
    }
}

} 

#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)

namespace GenNS1
{



void func2(int data);

static void func10()
{
    int data;
    data = -1;
    data = 20;
    func2(data);
}

void func11()
{
    func10();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func11();
    printLine("Finished");
    return 0;
}

