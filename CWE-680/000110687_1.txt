

#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)

namespace GenNS1
{

typedef struct _structType
{
    int structFirst;
} structType;



void func1(structType myStruct)
{
    int data = myStruct.structFirst;
    {
        size_t dataBytes,i;
        int *intPointer;
        dataBytes = data * sizeof(int); 
        intPointer = (int*)new char[dataBytes];
        for (i = 0; i < (size_t)data; i++)
        {
            intPointer[i] = 0; 
        }
        printIntLine(intPointer[0]);
        delete [] intPointer;
    }
}

} 

#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)

namespace GenNS1
{

typedef struct _structType
{
    int structFirst;
} structType;



void func1(structType myStruct);

void func3()
{
    int data;
    structType myStruct;
    data = -1;
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            data = atoi(inputBuffer);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    myStruct.structFirst = data;
    func1(myStruct);
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func3();
    printLine("Finished");
    return 0;
}

