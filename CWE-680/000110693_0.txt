

namespace GenNS1
{

class GenClass1
{
public:
    virtual void action(int data) = 0;
};



class GenClass3 : public GenClass1
{
public:
    void action(int data);
};

}



namespace GenNS1
{

void GenClass3::action(int data)
{
    {
        size_t dataBytes,i;
        int *intPointer;
        dataBytes = data * sizeof(int); 
        intPointer = (int*)new char[dataBytes];
        for (i = 0; i < (size_t)data; i++)
        {
            intPointer[i] = 0; 
        }
        printIntLine(intPointer[0]);
        delete [] intPointer;
    }
}

}


#define CHAR_ARRAY_SIZE (3 * sizeof(data) + 2)

namespace GenNS1
{



static void func3()
{
    int data;
    data = -1;
    data = 20;
    GenClass1* baseObject = new GenClass3;
    baseObject->action(data);
    delete baseObject;
}

void func4()
{
    func3();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func4();
    printLine("Finished");
    return 0;
}

