

namespace GenNS1
{

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );
    return 0;
}



namespace GenNS1
{



class GenClass2 
{
    public:
        GenClass2(char * name)
        {
            this->name = NULL;
            this->name = (char *)realloc(this->name, strlen(name)+1);
            if (this->name == NULL) {exit(-1);}
            strcpy(this->name, name);
        }

        ~GenClass2()
        {
            free(name);
        }

        GenClass2(GenClass2 &var2)
        { 
            this->name = (char *)realloc(this->name, strlen(var2.name)+1);
            if (this->name == NULL) {exit(-1);}
            strcpy(this->name, var2.name);
        }

        GenClass2& operator=(const GenClass2 &var2) 
        { 
            if (&var2 != this) 
            { 
                this->name = (char *)realloc(this->name, strlen(var2.name)+1);
                if (this->name == NULL) {exit(-1);}
                strcpy(this->name, var2.name);
            } 
            return *this; 
        }

        void printName()
        {
            printLine(name);
        }

    private:
        char * name;
};

static void func8()
{
    GenClass2 var2 (");
    var2.printName();
}

void func9()
{
    func8();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func9();
    printLine("Finished");
    return 0;
}

