

#ifndef _WIN32
#include <wchar.h>
#endif

namespace GenNS1
{



class GenClass2
{
public:
    GenClass2(size_t dataCopy);
    ~GenClass2();

private:
    size_t data;
};

class GenClass3
{
public:
    GenClass3(size_t dataCopy);
    ~GenClass3();

private:
    size_t data;
};

}



#define HELLO_STRING L"hello"

namespace GenNS1
{
GenClass3::GenClass3(size_t dataCopy)
{
    data = dataCopy;
    data = rand();
}

GenClass3::~GenClass3()
{
    {
        wchar_t * myString;
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}
}




#define HELLO_STRING L"hello"

namespace GenNS1
{
GenClass2::GenClass2(size_t dataCopy)
{
    data = dataCopy;
    data = 20;
}

GenClass2::~GenClass2()
{
    {
        wchar_t * myString;
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
}


namespace GenNS1
{



static void func5()
{
    size_t data;
    data = 0;
    GenClass2 var2(data);
}

static void func6()
{
    size_t data;
    data = 0;
    GenClass3 var3(data);
}

void func7()
{
    func5();
    func6();
}

} 



using namespace GenNS1; 

int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func7();
    printLine("Finished");
    return 0;
}

