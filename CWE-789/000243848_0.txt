

#ifndef _WIN32
#include <wchar.h>
#endif

#define HELLO_STRING L"hello"

typedef struct var1
{
    size_t structFirst;
} var2;



void func2(var2 myStruct)
{
    size_t data = myStruct.structFirst;
    {
        wchar_t * myString;
        if (data > wcslen(HELLO_STRING))
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}

void func3(var2 myStruct)
{
    size_t data = myStruct.structFirst;
    {
        wchar_t * myString;
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
}



#ifndef _WIN32
#include <wchar.h>
#endif

#define HELLO_STRING L"hello"

typedef struct var1
{
    size_t structFirst;
} var2;



void func2(var2 myStruct);

static void func5()
{
    size_t data;
    var2 myStruct;
    data = 0;
    data = 20;
    myStruct.structFirst = data;
    func2(myStruct);
}

void func3(var2 myStruct);

static void func6()
{
    size_t data;
    var2 myStruct;
    data = 0;
    fscanf(stdin, "%zu", &data);
    myStruct.structFirst = data;
    func3(myStruct);
}

void func7()
{
    func5();
    func6();
}



int main(int argc, char * argv[])
{
    srand( (unsigned)time(NULL) );

    printLine("Calling ...");
    func7();
    printLine("Finished");
    return 0;
}

